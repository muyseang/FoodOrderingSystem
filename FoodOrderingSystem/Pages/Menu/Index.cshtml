@page
@model FoodOrderingSystem.Pages.Menu.IndexModel
@{
    ViewData["Title"] = "Menu - Our Delicious Food";
}

<form style="display: none;">
    @Html.AntiForgeryToken()
</form>

<div class="hero-section bg-primary text-white py-5 mb-5 rounded">
    <div class="container text-center">
        <h1 class="display-4 fw-bold mb-3">
            <i class="fas fa-utensils me-3"></i>Our Menu
        </h1>
        <p class="lead">Discover our delicious selection of freshly prepared meals</p>
    </div>
</div>

<div class="container-fluid">
    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="input-group input-group-lg">
                <span class="input-group-text bg-light">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" class="form-control" id="searchInput" placeholder="Search for your favorite food...">
            </div>
        </div>
        <div class="col-md-4">
            <select class="form-select form-select-lg" id="categoryFilter">
                <option value="">All Categories</option>
                @if (Model.FoodItems != null)
                {
                    @foreach (var category in Model.FoodItems.Select(f => f.Category).Distinct().Where(c => !string.IsNullOrEmpty(c)))
                    {
                        <option value="@category">@category</option>
                    }
                }
            </select>
        </div>
    </div>

    @if (Model.FoodItems != null && Model.FoodItems.Count > 0)
    {
        <!-- Food Items Grid -->
        <div class="row g-4" id="foodItemsContainer">
            @foreach (var item in Model.FoodItems)
            {
                <div class="col-xl-3 col-lg-4 col-md-6 food-item" data-category="@item.Category" data-name="@item.Name.ToLower()">
                    <div class="card h-100 shadow-sm border-0 food-card">
                        <!-- Food Image -->
                        <div class="card-img-wrapper" style="height: 200px; overflow: hidden; position: relative;">
                            @if (!string.IsNullOrEmpty(item.ImageUrl))
                            {
                                <img src="@item.ImageUrl" 
                                     alt="@item.Name" 
                                     class="card-img-top food-image"
                                     style="height: 100%; width: 100%; object-fit: cover; transition: transform 0.3s ease;"
                                     loading="lazy"
                                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                            }
                            <div class="food-image-fallback bg-light d-flex align-items-center justify-content-center h-100 w-100" 
                                 style="position: absolute; top: 0; left: 0; @(string.IsNullOrEmpty(item.ImageUrl) ? "" : "display: none;")">
                                <i class="fas fa-utensils text-muted" style="font-size: 3rem;"></i>
                            </div>
                        </div>
                        
                        <div class="card-body d-flex flex-column">
                            <!-- Category Badge -->
                            @if (!string.IsNullOrEmpty(item.Category))
                            {
                                <span class="badge bg-secondary mb-2 align-self-start">@item.Category</span>
                            }
                            
                            <!-- Item Name -->
                            <h5 class="card-title fw-bold text-dark mb-2">@item.Name</h5>
                            
                            <!-- Description -->
                            @if (!string.IsNullOrEmpty(item.Description))
                            {
                                <p class="card-text text-muted small flex-grow-1">@item.Description</p>
                            }
                            else
                            {
                                <p class="card-text text-muted small flex-grow-1">Delicious @item.Name prepared with fresh ingredients.</p>
                            }
                            
                            <!-- Price and Action -->
                            <div class="mt-auto">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="h4 text-success fw-bold mb-0">$@item.Price.ToString("F2")</span>
                                    <button class="btn btn-primary btn-sm px-3" onclick="addToCart(@item.Id, '@item.Name', @item.Price)">
                                        <i class="fas fa-cart-plus me-1"></i>Add to Cart
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- No Results Message (Hidden by default) -->
        <div id="noResults" class="text-center py-5" style="display: none;">
            <i class="fas fa-search text-muted" style="font-size: 4rem;"></i>
            <h3 class="mt-3 text-muted">No items found</h3>
            <p class="text-muted">Try adjusting your search or filter criteria</p>
        </div>
    }
    else
    {
        <!-- Empty State -->
        <div class="text-center py-5">
            <i class="fas fa-utensils text-muted" style="font-size: 5rem;"></i>
            <h3 class="mt-4 text-muted">No Food Items Available</h3>
            <p class="text-muted">Our menu is currently being updated. Please check back soon!</p>
            <a href="/Admin/FoodItems" class="btn btn-primary mt-3">
                <i class="fas fa-plus me-2"></i>Add Food Items (Admin)
            </a>
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', filterItems);
        document.getElementById('categoryFilter').addEventListener('change', filterItems);

        function filterItems() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const selectedCategory = document.getElementById('categoryFilter').value;
            const foodItems = document.querySelectorAll('.food-item');
            let visibleCount = 0;

            foodItems.forEach(item => {
                const itemName = item.getAttribute('data-name');
                const itemCategory = item.getAttribute('data-category');
                
                const matchesSearch = itemName.includes(searchTerm);
                const matchesCategory = selectedCategory === '' || itemCategory === selectedCategory;
                
                if (matchesSearch && matchesCategory) {
                    item.style.display = 'block';
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                }
            });

            // Show/hide no results message
            const noResults = document.getElementById('noResults');
            const container = document.getElementById('foodItemsContainer');
            if (visibleCount === 0 && (searchTerm || selectedCategory)) {
                noResults.style.display = 'block';
                container.style.display = 'none';
            } else {
                noResults.style.display = 'none';
                container.style.display = 'flex';
            }
        }

        // Add to Cart functionality
        function addToCart(itemId, itemName, itemPrice) {
            // Create form data for AJAX request
            const formData = new FormData();
            formData.append('foodItemId', itemId);
            formData.append('quantity', 1);
            
            // Get the button to show loading state
            const button = event.target.closest('button');
            const originalText = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Adding...';
            
            // Make AJAX request to add item to cart
            fetch('/Menu?handler=AddToCart', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success toast
                    showToast(data.message || `${itemName} added to cart!`, 'success');
                    
                    // Update cart count in navigation (if you add this feature later)
                    updateCartCount();
                } else if (data.requiresLogin) {
                    // Show login required message with redirect option
                    showLoginRequiredToast(data.message || 'Please login to add items to cart');
                } else {
                    showToast(data.message || 'Failed to add item to cart', 'error');
                }
            })
            .catch(error => {
                console.error('Error adding to cart:', error);
                showToast('Failed to add item to cart', 'error');
            })
            .finally(() => {
                // Restore button state
                button.disabled = false;
                button.innerHTML = originalText;
            });
        }
        
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            const bgColor = type === 'success' ? 'bg-success' : 'bg-danger';
            const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
            
            toast.className = `toast align-items-center text-white ${bgColor} border-0 position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 1050;';
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas ${icon} me-2"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            document.body.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                document.body.removeChild(toast);
            });
        }

        function showLoginRequiredToast(message) {
            const toast = document.createElement('div');
            toast.className = 'toast align-items-center text-white bg-warning border-0 position-fixed';
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 350px;';
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas fa-sign-in-alt me-2"></i>
                        ${message}
                        <div class="mt-2">
                            <a href="/Account/Login" class="btn btn-sm btn-light me-2">
                                <i class="fas fa-sign-in-alt me-1"></i>Login
                            </a>
                            <a href="/Account/Register" class="btn btn-sm btn-outline-light">
                                <i class="fas fa-user-plus me-1"></i>Register
                            </a>
                        </div>
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            document.body.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast, { delay: 8000 }); // Show longer for user to see buttons
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                document.body.removeChild(toast);
            });
        }
        
        function updateCartCount() {
            // This function could fetch and display cart count in navigation
            // For now, we'll just log it
            console.log('Cart updated');
        }

        // Add hover effects to cards and images
        document.querySelectorAll('.food-card').forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-5px)';
                this.style.transition = 'all 0.3s ease';
                
                // Add image zoom effect
                const foodImage = this.querySelector('.food-image');
                if (foodImage) {
                    foodImage.style.transform = 'scale(1.1)';
                }
            });
            
            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
                
                // Reset image zoom
                const foodImage = this.querySelector('.food-image');
                if (foodImage) {
                    foodImage.style.transform = 'scale(1)';
                }
            });
        });
    </script>
}